name: Deploy AI Legal Assistant to AWS

on:
  push:
    branches: [master]
    paths:
      - "infrastructure/**"
      - "backend/**"
      - ".github/workflows/**"
  workflow_dispatch:
    inputs:
      force_infrastructure_update:
        description: "Force infrastructure update"
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  INFRA_STACK: ai-legal-assistant-infra
  SERVICE_STACK: ai-legal-assistant-service
  APPLICATION_NAME: ai-legal-assistant
  IMAGE_TAG: latest

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      infra-deployed: ${{ steps.infra_deploy.outcome }}
      ecr_repo_uri: ${{ steps.infra_outputs.outputs.ecr_repo_uri }}
      alb_dns: ${{ steps.infra_outputs.outputs.alb_dns }}
      app_sg: ${{ steps.infra_outputs.outputs.app_sg }}
      tg_arn: ${{ steps.infra_outputs.outputs.tg_arn }}
      subnet1: ${{ steps.infra_outputs.outputs.subnet1 }}
      subnet2: ${{ steps.infra_outputs.outputs.subnet2 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy infra stack (create/update)
        id: infra_deploy
        run: |
          set -e
          echo "Deploying infra stack: $INFRA_STACK"
          aws cloudformation deploy \
            --stack-name $INFRA_STACK \
            --template-file infrastructure/infra-stack.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides Environment=production DBPassword="${{ secrets.DB_PASSWORD }}" \
            --region ${{ env.AWS_REGION }}

      - name: Get infra outputs
        id: infra_outputs
        run: |
          ECR_URI=$(aws cloudformation describe-stacks --stack-name $INFRA_STACK --query "Stacks[0].Outputs[?OutputKey=='EcrRepoUri'].OutputValue" --output text)
          ALB_DNS=$(aws cloudformation describe-stacks --stack-name $INFRA_STACK --query "Stacks[0].Outputs[?OutputKey=='AlbDNS'].OutputValue" --output text)
          BUCKET=$(aws cloudformation describe-stacks --stack-name $INFRA_STACK --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
          DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name $INFRA_STACK --query "Stacks[0].Outputs[?OutputKey=='DatabaseEndpoint'].OutputValue" --output text)
          REDIS_ENDPOINT=$(aws cloudformation describe-stacks --stack-name $INFRA_STACK --query "Stacks[0].Outputs[?OutputKey=='RedisEndpoint'].OutputValue" --output text)

          # Derive additional info needed for service stack
          APP_SG=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=ai-legal-assistant-app-sg-*" --query "SecurityGroups[0].GroupId" --output text || echo "")
          TG_ARN=$(aws elbv2 describe-target-groups --names ai-legal-assistant-tg --query "TargetGroups[0].TargetGroupArn" --output text || echo "")
          SUBNET1=$(aws ec2 describe-subnets --filters "Name=cidr-block,Values=10.0.3.0/24" --query "Subnets[0].SubnetId" --output text || echo "")
          SUBNET2=$(aws ec2 describe-subnets --filters "Name=cidr-block,Values=10.0.4.0/24" --query "Subnets[0].SubnetId" --output text || echo "")

          echo "ecr_repo_uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "db_endpoint=$DB_ENDPOINT" >> $GITHUB_OUTPUT
          echo "redis_endpoint=$REDIS_ENDPOINT" >> $GITHUB_OUTPUT
          echo "app_sg=$APP_SG" >> $GITHUB_OUTPUT
          echo "tg_arn=$TG_ARN" >> $GITHUB_OUTPUT
          echo "subnet1=$SUBNET1" >> $GITHUB_OUTPUT
          echo "subnet2=$SUBNET2" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      image-uri: ${{ steps.push.outputs.image_uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ env.APPLICATION_NAME }}:${{ github.sha }} ./backend
          docker tag ${{ env.APPLICATION_NAME }}:${{ github.sha }} ${{ env.APPLICATION_NAME }}:${{ env.IMAGE_TAG }}

      - name: Ensure ECR repo exists (idempotent)
        run: |
          set -e
          ECR_URI="${{ needs.prepare.outputs.ecr_repo_uri }}"
          if [ -z "$ECR_URI" ] || [ "$ECR_URI" = "None" ]; then
            echo "ECR URI not found in infra outputs â€” creating repo"
            aws ecr create-repository --repository-name ${{ env.APPLICATION_NAME }} || true
            ECR_URI=$(aws ecr describe-repositories --repository-names ${{ env.APPLICATION_NAME }} --query "repositories[0].repositoryUri" --output text)
          fi
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_URI

      - name: Tag & Push to ECR
        id: push
        run: |
          set -e
          REPO_URI="$ECR_URI"
          docker tag ${{ env.APPLICATION_NAME }}:${{ env.IMAGE_TAG }} $REPO_URI:${{ env.IMAGE_TAG }}
          docker push $REPO_URI:${{ env.IMAGE_TAG }}
          IMAGE_URI="$REPO_URI:${{ env.IMAGE_TAG }}"
          echo "::set-output name=image_uri::$IMAGE_URI"

  deploy-service:
    needs: [prepare, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy service stack (TaskDefinition + Service)
        id: deploy_service
        run: |
          set -e
          REPO_IMAGE="${{ needs.build-and-push.outputs.image-uri }}"
          echo "Deploying service stack with image: $REPO_IMAGE"

          aws cloudformation deploy \
            --stack-name ${{ env.SERVICE_STACK }} \
            --template-file infrastructure/service-stack.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=production \
              ClusterName=ai-legal-assistant-cluster \
              ImageUri=$REPO_IMAGE \
              AlbTargetGroupArn=${{ needs.prepare.outputs.tg_arn }} \
              AppSecurityGroupId=${{ needs.prepare.outputs.app_sg }} \
              Subnet1=${{ needs.prepare.outputs.subnet1 }} \
              Subnet2=${{ needs.prepare.outputs.subnet2 }} \
            --region ${{ env.AWS_REGION }}

      - name: Force ECS deployment (safety)
        run: |
          CLUSTER=ai-legal-assistant-cluster
          SERVICE=$(aws ecs list-services --cluster $CLUSTER --query "serviceArns[0]" --output text)
          if [ "$SERVICE" != "None" ] && [ -n "$SERVICE" ]; then
            echo "Forcing new deployment"
            aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment || true
          else
            echo "Service not found or just created via CFN"
          fi

  summary:
    needs: [prepare, build-and-push, deploy-service]
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ALB URL: http://${{ needs.prepare.outputs.alb_dns }}" >> $GITHUB_STEP_SUMMARY
          echo "- ECR: ${{ needs.prepare.outputs.ecr_repo_uri }}" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ needs.build-and-push.outputs.image-uri }}" >> $GITHUB_STEP_SUMMARY
