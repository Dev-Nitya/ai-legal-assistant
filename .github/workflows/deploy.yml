name: Deploy AI Legal Assistant to AWS

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch: # Allows manual triggering

env:
  AWS_REGION: us-east-1
  STACK_NAME: ai-legal-assistant-infra
  APPLICATION_NAME: ai-legal-assistant

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          cd backend
          # pytest tests/ --cov=. --cov-report=xml
          echo "Tests would run here"

      - name: Lint code
        run: |
          cd backend
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    outputs:
      bucket-name: ${{ steps.deploy-stack.outputs.bucket-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy cloudformation stack
        id: deploy-stack
        run: |
          echo "Deploying CloudFormation stack..."

          aws cloudformation deploy \
            --template-file infrastructure/cloudformation.yml \
            --stack-name ${{ env.STACK_NAME }} \
            --parameter-overrides Environment=production \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset

          # Get bucket name
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`BucketName`].OutputValue' \
            --output text \
            --region ${{ env.AWS_REGION }})

          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "Deployed to bucket: $BUCKET_NAME"

  build-and-deploy:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    needs: [test, deploy-infrastructure]
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "Building Docker image.."
          docker build -t ${{ env.APPLICATION_NAME }}:${{ github.sha }} ./backend
          docker tag ${{ env.APPLICATION_NAME }}:${{ github.sha }} ${{ env.APPLICATION_NAME }}:latest
          echo "Docker image built successfully"

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${{ needs.deploy-infrastructure.outputs.bucket-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed By**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Upload your PDF documents:" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   aws s3 cp your-documents/ s3://${{ needs.deploy-infrastructure.outputs.bucket-name }}/legal-documents/ --recursive" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. Set your OpenAI API key in GitHub Secrets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. Run the application locally or deploy to ECS" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, build-and-deploy]
    if: always()

    steps:
      - name: Deployment Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "Deployment succeeded! 🎉"
          echo "Deployed to bucket: ${{ needs.deploy-infrastructure.outputs.bucket-name }}"

      - name: Deployment Failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
