AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Legal Assistant - Infra stack (VPC, ALB, ECR repo, RDS, Redis, IAM, etc.)'

Parameters:
  BucketName:
    Type: String
    Default: ai-legal-assistant-documents-global
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 128

Resources:
  DocumentsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${BucketName}-${Environment}-${AWS::AccountId}"
      VersioningConfiguration: { Status: Enabled }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security groups
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application SG
      VpcId: !Ref VPC

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppSecurityGroup

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Redis SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref AppSecurityGroup

  # RDS Subnet Group + DB
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnet group
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]

  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'ai-legal-assistant-postgres-${Environment}'
      DBInstanceClass: 'db.t4g.micro'
      Engine: postgres
      EngineVersion: '17.6'
      AllocatedStorage: 20
      StorageType: gp2
      DBName: ai_legal_assistant
      MasterUsername: postgres
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups: [ !Ref DatabaseSecurityGroup ]
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7

  # ElastiCache
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Redis subnet group
      SubnetIds: [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]

  RedisReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupId: !Sub "ai-redis-${Environment}"
      ReplicationGroupDescription: "Redis for AI Legal Assistant"
      Engine: redis
      EngineVersion: "7.1"
      CacheNodeType: cache.t4g.micro
      NumNodeGroups: 1         # one shard
      ReplicasPerNodeGroup: 0  # single primary, no replicas
      AutomaticFailoverEnabled: false
      MultiAZEnabled: false
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      SecurityGroupIds: [ !Ref CacheSecurityGroup ]

  # IAM Role for ECS tasks
  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ecs-tasks.amazonaws.com] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3DocumentsAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ s3:GetObject, s3:ListBucket, s3:PutObject ]
            Resource: [ !GetAtt DocumentsBucket.Arn, !Sub "${DocumentsBucket.Arn}/*" ]
      Roles: [ !Ref ApplicationRole ]

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/ai-legal-assistant-${Environment}-${AWS::AccountId}"
      RetentionInDays: 30

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: ai-legal-assistant

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ai-legal-assistant-cluster

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
      SecurityGroups: [ !Ref AlbSecurityGroup ]
      Scheme: internet-facing

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health/ready
      HealthCheckIntervalSeconds: 20

  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

Outputs:
  EcrRepoUri:
    Value: !GetAtt EcrRepository.RepositoryUri
    Export: { Name: !Sub "${AWS::StackName}-EcrRepoUri" }

  AlbDNS:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export: { Name: !Sub "${AWS::StackName}-AlbDNS" }

  BucketName:
    Value: !Ref DocumentsBucket
    Export: { Name: !Sub "${AWS::StackName}-BucketName" }

  DatabaseEndpoint:
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Address
    Export: { Name: !Sub "${AWS::StackName}-DatabaseEndpoint" }

  RedisPrimaryEndpoint:
    Description: Primary endpoint for Redis
    Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
    Export: { Name: !Sub "${AWS::StackName}-RedisPrimaryEndpoint" }

  RedisReaderEndpoint:
    Description: Reader endpoint (if replicas exist, otherwise same as primary)
    Value: !GetAtt RedisReplicationGroup.ReaderEndPoint.Address
    Export: { Name: !Sub "${AWS::StackName}-RedisReaderEndpoint" }
