AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Legal Assistant Infrastructure'

Parameters:
  BucketName:
    Type: String
    Description: S3 bucket name for legal documents
    Default: ai-legal-assistant-documents-global
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]

  DBPassword:
    Type: String
    Description: PostgreSQL master password
    NoEcho: true
    MinLength: 8
    MaxLength: 128

Resources:
  # S3 Bucket for Documents (persistent across deployments)
  DocumentsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain # Retain bucket on stack deletion
    UpdateReplacePolicy: Retain # Retain bucket on stack update
    Properties:
      BucketName: !Sub "${BucketName}-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionOldVersions
            Status: Enabled
            NoncurrentVersionTransitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      Tags:
        - Key: Name
          Value: !Sub "${BucketName}-${Environment}-${AWS::AccountId}"
        - Key: Environment
          Value: !Ref Environment
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-vpc-${Environment}'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-public-1-${Environment}'
        - Key: Type
          Value: Public

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-public-2-${Environment}'
        - Key: Type
          Value: 'Public'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false  # No public IPs (private)
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-private-1-${Environment}'
        - Key: Type
          Value: 'Private'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false  # No public IPs (private)
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-private-2-${Environment}'
        - Key: Type
          Value: 'Private'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-igw-${Environment}'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1  # NAT goes in public subnet
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-nat-${Environment}'

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-nat-eip-${Environment}'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-public-rt-${Environment}'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-private-rt-${Environment}'

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for RDS PostgreSQL database'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          Description: 'Allow PostgreSQL access from application only'
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-db-sg-${Environment}'

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for application server'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80    # HTTP
          ToPort: 80
          CidrIp: '0.0.0.0/0'  # Allow from anywhere
        - IpProtocol: tcp
          FromPort: 443   # HTTPS
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 8000  # FastAPI port
          ToPort: 8000
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-app-sg-${Environment}'

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for ElastiCache Redis'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
          Description: 'Allow Redis access from application only'
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-cache-sg-${Environment}'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS database - PRIVATE subnets only'
      SubnetIds:
        - !Ref PrivateSubnet1  # Database in private subnet 1
        - !Ref PrivateSubnet2  # Database in private subnet 2
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-db-subnet-group-${Environment}'

  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'ai-legal-assistant-postgres-${Environment}'
      DBInstanceClass: 'db.t4g.micro'      # Smallest ARM instance (cheapest)
      Engine: 'postgres'
      EngineVersion: '17.6'                # Recent stable version
      AllocatedStorage: 20                 # 20GB storage (minimum)
      StorageType: 'gp2'                   # General Purpose SSD
      
      # Database credentials
      DBName: 'ai_legal_assistant'         # Database name
      MasterUsername: 'postgres'           # Admin username
      MasterUserPassword: !Ref DBPassword
      
      # Network configuration
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      
      # Cost optimization settings
      MultiAZ: false                       # No redundancy (saves money)
      BackupRetentionPeriod: 7             # Keep backups for 7 days
      DeleteAutomatedBackups: true         # Clean up old backups
      DeletionProtection: false            # Allow deletion (for development)
      
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-postgres-${Environment}'

  # CACHE SETUP
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: 'Subnet group for ElastiCache - PRIVATE subnets only'
      SubnetIds:
        - !Ref PrivateSubnet1  # Cache in private subnet 1
        - !Ref PrivateSubnet2  # Cache in private subnet 2

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      ClusterName: !Sub 'ai-legal-assistant-redis-${Environment}'
      Engine: 'redis'
      CacheNodeType: 'cache.t4g.micro'
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Tags:
        - Key: Name
          Value: !Sub 'ai-legal-assistant-redis-${Environment}'

  # IAM Role for Application
  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ai-legal-assistant-role-${Environment}-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # IAM Policy for S3 Access
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3DocumentsAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !GetAtt DocumentsBucket.Arn
              - !Sub "${DocumentsBucket.Arn}/*"
      Roles:
        - !Ref ApplicationRole

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/ecs/ai-legal-assistant-${Environment}-${AWS::AccountId}"
      RetentionInDays: 30

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: ai-legal-assistant

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ai-legal-assistant-cluster

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ai-legal-assistant
      RetentionInDays: 14

  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ai-legal-assistant-task
      Cpu: "512"
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ApplicationRole.Arn
      TaskRoleArn: !GetAtt ApplicationRole.Arn
      ContainerDefinitions:
        - Name: ai-legal-assistant
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ai-legal-assistant:latest"
          PortMappings:
            - ContainerPort: 8000
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: AWS_RDS_ENDPOINT
              Value: !GetAtt PostgreSQLDatabase.Endpoint.Address
            - Name: AWS_ELASTICACHE_ENDPOINT
              Value: !GetAtt RedisCluster.RedisEndpoint.Address
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/ai-legal-assistant
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB to ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref AlbSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ai-legal-assistant-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Scheme: internet-facing

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ai-legal-assistant-tg
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /health/ready
      HealthCheckIntervalSeconds: 20
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  AppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: AppListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref AppTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [!Ref AppSecurityGroup]
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      LoadBalancers:
        - ContainerName: ai-legal-assistant
          ContainerPort: 8000
          TargetGroupArn: !Ref AppTargetGroup
      

Outputs:
  BucketName:
    Description: S3 bucket name for documents
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub "${AWS::StackName}-BucketName"
  
  ApplicationRoleArn:
    Description: IAM role ARN for the application
    Value: !GetAtt ApplicationRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationRoleArn"

  DatabaseEndpoint:
    Description: 'RDS PostgreSQL endpoint (in private subnet)'
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseEndpoint"
  
  DatabasePort:
    Description: 'Database port'
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-DatabasePort"

  RedisEndpoint:
    Description: 'ElastiCache Redis endpoint (in private subnet)'
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-RedisEndpoint"

  # Network outputs
  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCId"

  PrivateSubnet1Id:
    Description: 'Private Subnet 1 ID (for database)'
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"

  PrivateSubnet2Id:
    Description: 'Private Subnet 2 ID (for database)'
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"

  EcrRepoUri:
    Description: "ECR Repository URI"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ai-legal-assistant"
    Export:
      Name: !Sub "${AWS::StackName}-EcrRepoUri"

  AlbDNS:
    Description: "ALB DNS Name"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-AlbDNS"