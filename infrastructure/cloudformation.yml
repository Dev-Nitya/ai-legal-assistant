AWSTemplateFormatVersion: '2010-09-09'
Description: 'AI Legal Assistant Infrastructure'

Parameters:
  BucketName:
    Type: String
    Description: S3 bucket name for legal documents
    Default: ai-legal-assistant-documents
  
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]

Resources:
  # S3 Bucket for Documents
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketName}-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
  
  # IAM Role for Application
  ApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ai-legal-assistant-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # IAM Policy for S3 Access
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3DocumentsAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub "${DocumentsBucket}/*"
              - !GetAtt DocumentsBucket.Arn
      Roles:
        - !Ref ApplicationRole

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "ai-legal-assistant-${Environment}"
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ecs/ai-legal-assistant-${Environment}"
      RetentionInDays: 30

Outputs:
  BucketName:
    Description: S3 bucket name for documents
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub "${AWS::StackName}-BucketName"
  
  ApplicationRoleArn:
    Description: IAM role ARN for the application
    Value: !GetAtt ApplicationRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationRoleArn"
  
  ECSClusterName:
    Description: ECS cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ECSClusterName"